{
  "REQ-STREAMED-DIFFUSION": {
    "kind": "REQ",
    "title": "Streamed diffusion of LM corrections",
    "modules": [
      "crates/core-rs/src/diffusion.rs",
      "crates/core-rs/src/lm/merge.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/streamed_diffusion.feature#SCEN-DIFFUSION-001"
    ],
    "tests": [
      "crates/core-rs/tests/diffusion.rs",
      "crates/core-rs/tests/lm_merge.rs"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-IME-CARETSAFE": {
    "kind": "REQ",
    "title": "No edits at or after the caret",
    "modules": [
      "crates/core-rs/src/diff.rs",
      "crates/core-rs/src/active_region.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/caret_safety.feature#SCEN-CARETS-001"
    ],
    "tests": [
      "crates/core-rs/tests/diff.rs",
      "crates/core-rs/tests/active_region.rs"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-A11Y-MOTION": {
    "kind": "REQ",
    "title": "Respect reduced-motion; single announcement; mechanical swap",
    "modules": [
      "web-demo/src/motion.tsx",
      "web-demo/src/liveRegion.tsx"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/two_word_highlight.feature#SCEN-HILITE-001"
    ],
    "tests": [
      "e2e/tests/motion.spec.ts",
      "e2e/tests/liveRegion.spec.ts"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-LOCAL-LM-INTEGRATION": {
    "kind": "REQ",
    "title": "On-device LM integration with graceful fallback",
    "modules": [
      "crates/core-rs/src/lm/factory.rs",
      "crates/core-rs/src/lm/client.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/local_lm_integration.feature#SCEN-LMLOCAL-001"
    ],
    "tests": [
      "crates/core-rs/tests/lm.rs"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-DOT-MATRIX-WAVE": {
    "kind": "REQ",
    "title": "Dot-matrix wave animation demo",
    "modules": [
      "demo/dot-matrix-wave/index.html",
      "demo/dot-matrix-wave/main.js",
      "demo/dot-matrix-wave/styles.css",
      "contracts/animTokens.ts"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/mechanical_swap.feature#SCEN-DOT-MATRIX-WAVE-001"
    ],
    "tests": [
      "e2e/tests/demo-dot-matrix-wave.spec.ts"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-CONTEXT-TRANSFORMER": {
    "kind": "REQ",
    "title": "Context transformer with ±2 sentence look-around",
    "modules": [
      "crates/core-rs/src/workers/context.rs",
      "crates/core-rs/src/diffusion.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/context_transformer.feature#SCEN-CONTEXT-001"
    ],
    "tests": [
      "crates/core-rs/tests/context.rs"
    ],
    "invariants": [
      "Never edits at/after caret (REQ-IME-CARETSAFE)"
    ],
    "types": [],
    "source": "docs/02-implementation/02-Implementation.md"
  },
  "REQ-TONE-TRANSFORMER": {
    "kind": "REQ",
    "title": "Tone transformer with baseline detection and selectable tone",
    "modules": [
      "crates/core-rs/src/workers/tone.rs",
      "crates/core-rs/src/diffusion.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/tone_transformer.feature#SCEN-TONE-001"
    ],
    "tests": [
      "crates/core-rs/tests/tone.rs"
    ],
    "invariants": [
      "Never edits at/after caret (REQ-IME-CARETSAFE)"
    ],
    "types": [],
    "source": "docs/02-implementation/02-Implementation.md"
  },
  "REQ-CONFIDENCE-GATE": {
    "kind": "REQ",
    "title": "Confidence gating across pipeline stages",
    "modules": [
      "crates/core-rs/src/confidence.rs",
      "crates/core-rs/src/staging_buffer.rs",
      "crates/core-rs/src/diffusion.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/confidence_gate.feature#SCEN-CONFIDENCE-001"
    ],
    "tests": [
      "crates/core-rs/tests/confidence.rs",
      "crates/core-rs/tests/staging_buffer.rs"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/02-implementation/02-Implementation.md"
  },
  "REQ-THREE-STAGE-PIPELINE": {
    "kind": "REQ",
    "title": "Integrate Noise → Context → Tone pipeline with staging buffer",
    "modules": [
      "crates/core-rs/src/diffusion.rs",
      "crates/core-rs/src/scheduler.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/three_stage_pipeline.feature#SCEN-PIPELINE-001"
    ],
    "tests": [
      "crates/core-rs/tests/integration.rs"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/02-implementation/02-Implementation.md"
  },
  "REQ-LANGUAGE-GATING": {
    "kind": "REQ",
    "title": "English-only gating for full pipeline (Noise for others)",
    "modules": [
      "crates/core-rs/src/language_detection.rs",
      "crates/core-rs/src/diffusion.rs",
      "crates/core-rs/src/scheduler.rs"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/language_gating.feature#SCEN-LANG-001"
    ],
    "tests": [
      "crates/core-rs/tests/language_detection.rs"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/02-implementation/02-Implementation.md"
  },
  "REQ-TONE-CONTROLS-UI": {
    "kind": "REQ",
    "title": "Web demo tone controls and thresholds",
    "modules": [
      "web-demo/src/App.tsx",
      "web-demo/src/App.css"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/tone_controls_ui.feature#SCEN-TONE-UI-001"
    ],
    "tests": [
      "e2e/tests/web-demo-tone-controls.spec.ts"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/02-implementation/02-Implementation.md"
  },
  "CONTRACT-CONFIDENCE-GATE": {
    "kind": "CONTRACT",
    "title": "Confidence gating behavior",
    "modules": [
      "crates/core-rs/src/confidence.rs"
    ],
    "types": [
      {
        "name": "ConfidenceScore",
        "rs": "pub struct ConfidenceScore {\n    pub input_fidelity: f32,\n    pub transform_quality: f32,\n    pub context_coherence: f32,\n    pub temporal_decay: f32,\n    pub total: f32,\n}\n"
      }
    ],
    "invariants": [
      "input_fidelity ∈ [0,1], weight=0.3",
      "transform_quality ∈ [0,1], weight=0.4",
      "context_coherence ∈ [0,1], weight=0.2",
      "temporal_decay ∈ [0,1], weight=0.1",
      "total = weighted sum ∈ [0,1]"
    ],
    "source": "docs/06-guides/06-03-reference/confidence-system.md"
  },
  "CONTRACT-ACTIVE-REGION-POLICY": {
    "kind": "CONTRACT",
    "title": "Active region management policy",
    "modules": [
      "crates/core-rs/src/active_region.rs"
    ],
    "types": [
      {
        "name": "ActiveRegionPolicy",
        "rs": "pub struct ActiveRegionPolicy {\n    pub render_range: Option<Range>,\n    pub context_range: Option<Range>,\n}\n"
      },
      {
        "name": "Range",
        "rs": "pub struct Range {\n    pub start: usize,\n    pub end: usize,\n}\n"
      }
    ],
    "invariants": [
      "Context can extend beyond render region but never crosses secure fields",
      "Render range must not include caret position (REQ-IME-CARETSAFE)"
    ],
    "source": "docs/06-guides/06-03-reference/active-region-policy.md"
  },
  "CONTRACT-LM-STREAM": {
    "kind": "CONTRACT",
    "title": "LM streaming event protocol",
    "modules": [
      "crates/core-rs/src/lm/stream.rs"
    ],
    "types": [
      {
        "name": "LMStreamParams",
        "rs": "pub struct LMStreamParams {\n    pub text: String,\n    pub caret: usize,\n    pub active_region: Range,\n    pub settings: Option<HashMap<String, Value>>,\n}\n"
      }
    ],
    "acceptance": [
      "crates/core-rs/tests/lm_stream.rs#SCEN-LM-STREAM-001",
      "e2e/tests/lm_lab.spec.ts#SCEN-LM-LAB-002"
    ],
    "invariants": [
      "Events must follow sequence: meta → stage+ → done",
      "Each stage must have commit before next stage",
      "Diffs must be within active region bounds"
    ],
    "source": "docs/06-guides/06-03-reference/lm-stream.md"
  }
}