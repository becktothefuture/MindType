{
  "REQ-CORRECTION-MARKER": {
    "kind": "REQ",
    "title": "Correction Marker visual system with two-mode operation",
    "modules": [
      "ui/swapRenderer.ts",
      "core/sweepScheduler.ts"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/mechanical_swap.feature"
    ],
    "tests": [
      "tests/swapRenderer.spec.ts"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-BURST-PAUSE-CORRECT": {
    "kind": "REQ",
    "title": "Muscle memory training through burst-pause-correct cycles",
    "modules": [
      "core/sweepScheduler.ts",
      "core/typingMonitor.ts"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/streamed_diffusion.feature"
    ],
    "tests": [
      "tests/sweepScheduler.spec.ts"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-VELOCITY-MODE": {
    "kind": "REQ",
    "title": "Speed enhancement mode for 180+ WPM typing",
    "modules": [
      "engines/noiseTransformer.ts",
      "engines/contextTransformer.ts"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/streamed_diffusion.feature"
    ],
    "tests": [
      "tests/noiseTransformer.spec.ts",
      "tests/contextTransformer.spec.ts"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "REQ-SEVEN-SCENARIOS": {
    "kind": "REQ",
    "title": "Support for all seven revolutionary usage scenarios",
    "modules": [
      "core/sweepScheduler.ts",
      "engines/noiseTransformer.ts",
      "engines/contextTransformer.ts",
      "engines/toneTransformer.ts"
    ],
    "acceptance": [
      "docs/12-qa/qa/acceptance/streamed_diffusion.feature",
      "docs/12-qa/qa/acceptance/caret_safety.feature",
      "docs/12-qa/qa/acceptance/mechanical_swap.feature"
    ],
    "tests": [
      "tests/sweepScheduler.spec.ts",
      "tests/noiseTransformer.spec.ts",
      "tests/contextTransformer.spec.ts",
      "tests/toneTransformer.spec.ts"
    ],
    "invariants": [],
    "types": [],
    "source": "docs/01-prd/01-PRD.md"
  },
  "CONTRACT-DOT-MATRIX-WAVE": {
    "kind": "CONTRACT",
    "title": "Dot-matrix wave animation tokens",
    "modules": [
      "contracts/animTokens.ts",
      "demo/dot-matrix-wave/main.js"
    ],
    "acceptance": [],
    "tests": [],
    "invariants": [
      {
        "Preserve layout": "no per-char DOM mutations; overlay only"
      },
      {
        "Reduced-motion": "static correction highlight, no rAF"
      }
    ],
    "types": [
      {
        "name": "AnimTokens",
        "ts": "export interface AnimTokens {\n  waveSpeed: number;\n  waveSpread: number;\n  waveMix: number; // 0..100\n  symbolSet: string[];\n  autoplay: boolean;\n  playhead: number; // 0..100\n}\n"
      },
      {
        "name": "DEFAULT_SYMBOLS",
        "ts": "export const DEFAULT_SYMBOLS = [\n  '\\u2800','\\u2802','\\u2804','\\u2806','\\u2810','\\u2812','\\u2814','\\u2816',\n  '\\u2820','\\u2822','\\u2824','\\u2826','\\u2830','\\u2832','\\u2834','\\u2836',\n] as const;\n"
      }
    ],
    "source": "docs/06-guides/dot-matrix-wave.md"
  },
  "CONTRACT-ACTIVE-REGION": {
    "kind": "CONTRACT",
    "title": "Active region policy (render vs context ranges)",
    "modules": [
      "crates/core-rs/src/active_region.rs"
    ],
    "acceptance": [],
    "tests": [],
    "invariants": [
      "Context can extend beyond render region but never crosses secure fields",
      "Render range must not include caret position (REQ-IME-CARETSAFE)"
    ],
    "types": [],
    "source": "docs/06-guides/06-03-reference/active-region-design.md"
  },
  "CONTRACT-LM-ADAPTER": {
    "kind": "CONTRACT",
    "title": "LMAdapter streaming contract",
    "modules": [
      "core/lm/types.ts",
      "core/lm/factory.ts",
      "core/activeRegionPolicy.ts"
    ],
    "acceptance": [],
    "tests": [],
    "invariants": [
      "Never emit a diff that modifies content at/after the caret (REQ-IME-CARETSAFE)"
    ],
    "types": [
      {
        "name": "LMStreamParams",
        "ts": "export interface LMStreamParams {\n  text: string;\n  caret: number;\n  active_region: { start: number; end: number };\n  settings?: Record<string, unknown>;\n}\n"
      }
    ],
    "source": "docs/06-guides/06-03-reference/lm-behavior.md"
  },
  "CONTRACT-LM-STREAM": {
    "kind": "CONTRACT",
    "title": "JSONL LM stream protocol (context â†’ tone)",
    "modules": [
      "core/lm/types.ts",
      "core/lm/mockStreamAdapter.ts",
      "web-demo/src/lab/LMLab.tsx"
    ],
    "acceptance": [
      "tests/lm_stream.spec.ts#SCEN-LM-STREAM-001",
      "e2e/tests/lm_lab.spec.ts#SCEN-LM-LAB-002"
    ],
    "tests": [],
    "invariants": [
      "Events are JSON objects per line with required type",
      "Tone stage runs only after context commit"
    ],
    "types": [],
    "source": "docs/06-guides/06-03-reference/lm-stream.md"
  }
}