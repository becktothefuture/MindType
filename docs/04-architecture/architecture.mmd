%%{init: {'theme': 'base', 'themeVariables': {'primaryColor': '#e3f2fd', 'primaryTextColor': '#0d47a1', 'primaryBorderColor': '#1976d2', 'lineColor': '#424242', 'secondaryColor': '#f3e5f5', 'tertiaryColor': '#e8f5e8', 'background': '#fafafa', 'mainBkg': '#ffffff', 'secondBkg': '#f5f5f5', 'tertiaryBkg': '#eeeeee'}}}%%
%% ═══════════════════════════════════════════════════════════════════════════════
%% 🧠 MINDTYPE SYSTEM ARCHITECTURE (v0.5) - RUST-FIRST SOURCE OF TRUTH
%% ═══════════════════════════════════════════════════════════════════════════════
%% 
%% PURPOSE: Complete visual map of Mind::Type's Rust-first text correction pipeline
%% SCOPE: All components from keystroke capture to text application
%% UPDATED: September 2025 - Reflects Rust-first architecture per ADR-0005
%% 
%% LEGEND & VISUAL HIERARCHY:
%% 🟢 Implemented or Design Complete  🟡 In Progress  🔴 Not Yet Built
%% ===> Critical Path (Bold)  --> Standard Connection  -.-> Feedback Loop
%% 📥 Input Points  📤 Output Points  ⚡ Processing  🎯 Decision Gates
%% ═══════════════════════════════════════════════════════════════════════════════

graph LR
    %% ═══════════════════════════════════════════════════════════════
    %% 🎯 CRITICAL PATH OVERVIEW (Quick Reference)
    %% ═══════════════════════════════════════════════════════════════
    %% 
    %% INPUT: 📝 User Types → 📡 Event Capture (Platform UI) → 🚀 Correction Request (FFI/WASM)
    %%    ↓
    %% PROCESSING (Rust Core): ⚡ Correction Engine → 🧹 Noise/Grammar/Context/Tone Workers → 🔀 Conflict Resolution
    %%    ↓  
    %% VALIDATION (Rust Core): ⚖️ Confidence Gate → 📊 Active Region → ⚛️ Correction List
    %%    ↓
    %% OUTPUT: ↩️ Correction Response (FFI/WASM) → 🎬 Visual Application (Platform UI) → 📝 Updated Text
    %% 
    %% ═══════════════════════════════════════════════════════════════
    
    %% ========================================
    %% TEXT INPUT/OUTPUT LOOP (Critical Flow)
    %% ========================================
    subgraph TEXT_LOOP ["📝 **TEXT INPUT/OUTPUT LOOP**<br/>Where text gets read and written<br/>📚 Docs: PRD.md (REQ-IME-CARETSAFE)"]
        direction TB
        
        subgraph TEXT_INPUT ["**📥 TEXT READING**<br/>🎯 User Input Capture"]
            TEXT_FIELD[("**① 📝 TEXT FIELD - INPUT**<br/>🔤 Example: 'helloo thr weathfr'<br/>📍 Caret at position 17<br/>👤 User actively typing<br/>🚀 **ENTRY POINT**")]
            PLATFORM_UI_INPUT["**② 📡 Platform UI (JS/Swift)**<br/>🔧 Captures text, caret, timestamp<br/>⚡ Every keystroke or pause"]
            RUST_REQUEST["**③ 🚀 Correction Request**<br/>📨 FFI/WASM call to Rust Core<br/>🎯 Creates CorrectionRequest struct<br/>🌊 Stream begins"]
        end
        
        subgraph TEXT_OUTPUT ["**📤 TEXT WRITING**<br/>✨ Corrected Output"]
            RUST_RESPONSE["**⑫ ✅ Correction Response**<br/>🎯 High-confidence corrections from Rust<br/>📋 List of Correction objects"]
            PLATFORM_UI_APPLY["**⑬ ⚛️ Visual Application (JS/Swift)**<br/>🔧 replaceRange() + Dot Matrix Wave<br/>🔤 UTF-16 safe<br/>📍 Caret preserved"]
            UPDATED_FIELD[("**⑭ 📝 UPDATED FIELD - OUTPUT**<br/>✨ Result: 'Hello, the weather'<br/>📍 Caret position preserved<br/>👤 User sees corrections<br/>🎉 **EXIT POINT**")]
        end
        
        TEXT_FIELD ==>|"**🚀 KEYSTROKE**<br/>⚡ Immediate capture"| PLATFORM_UI_INPUT
        PLATFORM_UI_INPUT ==>|"**📊 CREATE REQUEST**"| RUST_REQUEST
        RUST_RESPONSE ==>|"**✅ APPLY CORRECTIONS**"| PLATFORM_UI_APPLY
        PLATFORM_UI_APPLY ==>|"**⚛️ ATOMIC UPDATE**<br/>📍 Caret preserved"| UPDATED_FIELD
        UPDATED_FIELD -.->|"**🔄 CONTINUOUS LOOP**<br/>♾️ Typing cycle"| TEXT_FIELD
    end
    
    %% ========================================
    %% PLATFORM UI LAYER
    %% ========================================
    subgraph PLATFORM ["🌐 **PLATFORM UI LAYER** (JS/Swift)<br/>📚 Docs: adr/0005-rust-first-orchestrator.md"]
        direction TB
        WEB["**🟢 Web Platform**<br/>web-demo/src/App.tsx<br/>React + TypeScript + Vite<br/>Calls WASM module"]
        MAC["**🟡 macOS Platform**<br/>Swift + AX API + FFI<br/>NSStatusItem menu bar app<br/>Calls C FFI Bridge"]
    end
    
    %% ========================================
    %% RUST CORE ENGINE
    %% ========================================
    subgraph RUST_CORE ["⚡ **RUST CORE ENGINE**<br/>📚 Docs: architecture/rust-first-design.md, adr/0005"]
        direction TB
        
        subgraph FFI_WASM ["**FFI / WASM BRIDGE**<br/>crates/core-rs/src/ffi.rs<br/>crates/core-rs/src/wasm_bindings.rs"]
            FFI_C["**🟢 C FFI Bridge**<br/>For macOS/iOS"]
            WASM_JS["**🟢 WASM Bridge**<br/>For Web"]
        end

        ENGINE["**🟢 Correction Engine**<br/>crates/core-rs/src/engine.rs<br/>Orchestrates all workers"]
        
        subgraph WORKERS ["**CORRECTION WORKERS**"]
            NOISE_WORKER["**🟢 Noise Worker**<br/>Typos, Spacing"]
            GRAMMAR_WORKER["**🟢 Grammar Worker**<br/>Punctuation, Case"]
            CONTEXT_WORKER["**🟡 Context Worker**<br/>Coherence (LM)"]
            TONE_WORKER["**🔴 Tone Worker**<br/>Formality"]
        end
        
        CONFLICT_RESOLVER["**🟢 Conflict Resolver**<br/>crates/core-rs/src/conflict_resolver.rs<br/>Merges worker outputs"]
    end
    
    %% ========================================
    %% VALIDATION & STATE MANAGEMENT (RUST)
    %% ========================================
    subgraph VALIDATION ["🧩 **VALIDATION & STATE (RUST)**<br/>📚 Docs: adr/0002-caret-safe-diff.md"]
        direction TB
        
        CONFIDENCE["**🟢 Confidence Scorer**<br/>crates/core-rs/src/confidence.rs<br/>4D mathematical scoring"]
        ACTIVE_REGION["**🟢 Active Region Manager**<br/>crates/core-rs/src/active_region.rs<br/>20-word safe zone, rollback"]
        DIFF_GATE["**🟢 Diff/Merge Gate**<br/>crates/core-rs/src/diff.rs<br/>Caret-safe atomic updates"]
    end
    
    %% ========================================
    %% PRIMARY DATA FLOW CONNECTIONS
    %% ========================================
    
    RUST_REQUEST ===>|"**To Rust Core**"| FFI_WASM
    FFI_WASM --> ENGINE
    
    ENGINE --> WORKERS
    WORKERS --> CONFLICT_RESOLVER
    CONFLICT_RESOLVER --> CONFIDENCE
    CONFIDENCE --> ACTIVE_REGION
    ACTIVE_REGION --> DIFF_GATE
    
    DIFF_GATE ===>|"**From Rust Core**"| RUST_RESPONSE

    %% Internal Connections
    PLATFORM_UI_INPUT --> WEB
    PLATFORM_UI_INPUT --> MAC

    %% Link back to platform
    WEB --> FFI_WASM
    MAC --> FFI_WASM
    
    %% Feedback Loops
    UPDATED_FIELD -.->|"**Caret Moved**<br/>New typing event"| PLATFORM_UI_INPUT
    
    %% ═══════════════════════════════════════════════════════════════
    %% 🎨 VISUAL STYLING & GESTALT PRINCIPLES
    %% ═══════════════════════════════════════════════════════════════
    
    %% ═══ IMPLEMENTATION STATUS COLORS (Primary Visual Hierarchy) ═══
    classDef ready fill:#c8e6c9,stroke:#2e7d32,stroke-width:3px,color:#1b5e20
    classDef partial fill:#fff3c4,stroke:#f57c00,stroke-width:3px,color:#e65100
    classDef missing fill:#ffcdd2,stroke:#c62828,stroke-width:3px,color:#b71c1c
    
    %% ═══ ARCHITECTURAL LAYER COLORS (Gestalt Grouping) ═══
    classDef criticalFlow fill:#e3f2fd,stroke:#0d47a1,stroke-width:4px,color:#0d47a1
    classDef platformLayer fill:#e1f5fe,stroke:#0277bd,stroke-width:2px,color:#01579b
    classDef rustCore fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px,color:#4a148c
    classDef validationSafety fill:#fff8e1,stroke:#ff8f00,stroke-width:2px,color:#ff6f00
    
    %% ═══════════════════════════════════════════════════════════════
    %% 🎨 GESTALT VISUAL HIERARCHY APPLICATION
    %% ═══════════════════════════════════════════════════════════════
    
    class TEXT_LOOP,TEXT_INPUT,TEXT_OUTPUT criticalFlow
    class PLATFORM,WEB,MAC platformLayer
    class RUST_CORE,FFI_WASM,ENGINE,WORKERS,CONFLICT_RESOLVER rustCore
    class VALIDATION,CONFIDENCE,ACTIVE_REGION,DIFF_GATE validationSafety
    
    %% Status Application
    class WEB, ENGINE, FFI_WASM, NOISE_WORKER, GRAMMAR_WORKER, CONFLICT_RESOLVER, CONFIDENCE, ACTIVE_REGION, DIFF_GATE ready
    class MAC, CONTEXT_WORKER partial
    class TONE_WORKER missing
    
    %% ═══════════════════════════════════════════════════════════════
    %% 📚 DOCUMENTATION REFERENCE MAP
    %% ═══════════════════════════════════════════════════════════════
    %% 
    %% CORE ARCHITECTURE:
    %% • adr/0005-rust-first-orchestrator.md - The authoritative decision for this design
    %% • architecture/rust-first-design.md - Detailed explanation of components
    %% • guides/reference/rust-core-api.md - The exact API contract
    %% 
    %% KEY PRINCIPLES:
    %% • adr/0002-caret-safe-diff.md - The core safety guarantee
    %% • PRD.md - High-level product requirements
    %% ═══════════════════════════════════════════════════════════════
