%%{init: {'theme': 'base', 'themeVariables': {'primaryColor': '#e3f2fd', 'primaryTextColor': '#0d47a1', 'primaryBorderColor': '#1976d2', 'lineColor': '#424242', 'secondaryColor': '#f3e5f5', 'tertiaryColor': '#e8f5e8', 'background': '#fafafa', 'mainBkg': '#ffffff', 'secondBkg': '#f5f5f5', 'tertiaryBkg': '#eeeeee'}}}%%
%% ═══════════════════════════════════════════════════════════════════════════════
%% 🧠 MINDTYPE SYSTEM ARCHITECTURE (v0.4) - SOURCE OF TRUTH
%% ═══════════════════════════════════════════════════════════════════════════════
%% 
%% PURPOSE: Complete visual map of MindType's text correction pipeline
%% SCOPE: All components from keystroke capture to text application
%% UPDATED: September 2025 - Reflects current implementation state
%% 
%% LEGEND & VISUAL HIERARCHY:
%% 🟢 Ready (Fully Implemented)  🟡 Partial (Needs Polish)  🔴 Missing (Not Yet Built)
%% 🔄 Dual Architecture: TS (Current) + Rust (Target)  🚨 Bug/Violation Flagged
%% 
%% FLOW EMPHASIS:
%% ===> Critical Path (Bold)  --> Standard Connection  -.-> Feedback Loop
%% 📥 Input Points  📤 Output Points  ⚡ Processing  🎯 Decision Gates
%% ═══════════════════════════════════════════════════════════════════════════════

graph LR
    %% ═══════════════════════════════════════════════════════════════
    %% 🎯 CRITICAL PATH OVERVIEW (Quick Reference)
    %% ═══════════════════════════════════════════════════════════════
    %% 
    %% INPUT: 📝 User Types → 📡 Event Capture → 🚀 Pipeline Start
    %%    ↓
    %% PROCESSING: 🧹 Noise → 📚 Context (LM) → 🎨 Tone → 🔀 Conflict Resolution
    %%    ↓  
    %% VALIDATION: ⚖️ Confidence Gate → 🤖 Staging → 📊 Active Region → ⚛️ Diff/Merge
    %%    ↓
    %% OUTPUT: 🎬 UI Feedback → ⚛️ Atomic Update → 📝 Updated Text → 👤 User Sees Result
    %% 
    %% ═══════════════════════════════════════════════════════════════
    
    %% ========================================
    %% TEXT INPUT/OUTPUT LOOP (Critical Flow)
    %% ========================================
    subgraph TEXT_LOOP ["📝 **TEXT INPUT/OUTPUT LOOP**<br/>Where text gets read and written<br/>📚 Docs: PRD.md (REQ-IME-CARETSAFE, REQ-TIDY-SWEEP)"]
        direction TB
        
        subgraph TEXT_INPUT ["**📥 TEXT READING** (1-3)<br/>🎯 User Input Capture"]
            TEXT_FIELD[("**① 📝 TEXT FIELD - INPUT**<br/>🔤 Example: 'helloo thr weathfr'<br/>📍 Caret at position 17<br/>👤 User actively typing<br/>🚀 **ENTRY POINT**")]
            DOM_EVENTS["**② 📡 Event Capture**<br/>🔧 handleTextChange()<br/>📊 Extract: text, caret, timestamp<br/>⚡ Every keystroke captured<br/>🔄 Real-time processing"]
            PIPELINE_INGEST["**③ 🚀 Pipeline Start**<br/>📨 pipeline.ingest()<br/>🎯 Creates TypingEvent<br/>⚡ Triggers processing<br/>🌊 Stream begins"]
        end
        
        subgraph TEXT_OUTPUT ["**📤 TEXT WRITING** (12-14)<br/>✨ Corrected Output"]
            CORRECTIONS_READY["**⑫ ✅ Corrections Ready**<br/>🎯 High-confidence edits<br/>🚪 Passed quality gates<br/>📋 Ready to apply<br/>⚡ Final validation"]
            REPLACE_RANGE["**⑬ ⚛️ Atomic Update**<br/>🔧 replaceRange()<br/>🔤 UTF-16 safe<br/>📍 Caret preserved<br/>🛡️ Exception-safe"]
            UPDATED_FIELD[("**⑭ 📝 UPDATED FIELD - OUTPUT**<br/>✨ Result: 'Hello, the weather'<br/>📍 Caret position preserved<br/>👤 User sees corrections<br/>🎉 **EXIT POINT**")]
        end
        
        TEXT_FIELD ==>|"**🚀 KEYSTROKE**<br/>⚡ Immediate capture"| DOM_EVENTS
        DOM_EVENTS ==>|"**📊 EXTRACT DATA**<br/>📝 text, caret, timestamp"| PIPELINE_INGEST
        CORRECTIONS_READY ==>|"**✅ APPLY EDITS**<br/>📊 Score ≥ 0.90"| REPLACE_RANGE
        REPLACE_RANGE ==>|"**⚛️ ATOMIC UPDATE**<br/>📍 Caret preserved"| UPDATED_FIELD
        UPDATED_FIELD -.->|"**🔄 CONTINUOUS LOOP**<br/>♾️ Typing cycle"| TEXT_FIELD
    end
    
    %% ========================================
    %% PLATFORM LAYER
    %% ========================================
    subgraph PLATFORM ["🌐 **PLATFORM LAYER** (4-5)<br/>📚 Docs: adr/0003-architecture-constraints.md, system_principles.md"]
        direction TB
        
        WEB["**④ Web Platform**<br/>web-demo/src/App.tsx<br/>React + TypeScript + Vite<br/>Direct pipeline.ingest() calls"]
        MAC["**⑤ macOS Platform**<br/>Swift + AX API + FFI<br/>NSStatusItem menu bar app<br/>*Needs creation*"]
        
        NORMALIZE["**Platform Bridge**<br/>Normalizes all inputs:<br/>{text, caret, atMs}<br/>Cross-platform compatibility"]
    end
    
    %% ========================================
    %% DUAL ARCHITECTURE: TYPESCRIPT (CURRENT) + RUST (TARGET)
    %% ========================================
    subgraph DUAL_ARCH ["🔄 **DUAL ARCHITECTURE TRANSITION**<br/>Feature flag: <code>USE_WASM_CORE</code> (default OFF)"]
        direction TB
        
        subgraph TS_CURRENT ["**🟢 CURRENT: TypeScript Implementation**<br/>📁 core/ - Fully functional, production-ready<br/>🎯 Used by web demo, all tests passing"]
            TS_SCHEDULER["**🟢 TS SweepScheduler**<br/>📁 core/sweepScheduler.ts<br/>🚀 Orchestrates all transformers<br/>📊 Creates DiffusionController<br/>⚡ Production implementation"]
            TS_DIFFUSION["**🟢 TS DiffusionController**<br/>📁 core/diffusionController.ts<br/>🎬 Streaming ticks + visual feedback<br/>🔄 State management<br/>📡 UI event emission"]
            TS_CONFIDENCE["**🟢 TS Confidence System**<br/>📁 core/confidenceGate.ts<br/>🧮 4D mathematical scoring<br/>⚖️ Dynamic thresholds<br/>🎯 Production-ready"]
        end
        
        subgraph RUST_TARGET ["**🔴 TARGET: Rust Implementation**<br/>📁 crates/core-rs/ - Partial stubs, migration target<br/>🎯 Cross-platform performance goal"]
            RUST_ENGINE["**🔴 Rust Engine**<br/>📁 crates/core-rs/src/engine.rs<br/>🚧 Placeholder stub<br/>🎯 Should replace TS orchestrator<br/>⚠️ Not yet implemented"]
            RUST_TAPESTRY["**🔴 Rust Tapestry**<br/>📁 crates/core-rs/src/tapestry.rs<br/>🚧 Basic span tracking stub<br/>🎯 Should replace TS activeRegion<br/>⚠️ Minimal implementation"]
            RUST_CONFIDENCE["**🔴 Rust Confidence**<br/>📁 crates/core-rs/src/confidence.rs<br/>🚧 Basic threshold stub<br/>🎯 Should replace TS confidenceGate<br/>⚠️ Missing 4D scoring"]
            RUST_FFI["**🟡 Rust FFI Bridge**<br/>📁 crates/core-rs/src/ffi.rs<br/>🔗 C bindings for macOS<br/>🌐 WASM bindings for web<br/>⚠️ Bindings exist, core missing"]
        end
        
        MIGRATION_NOTE["**🔄 Migration Status:**<br/>📝 ADR-0005 mandates Rust-first orchestrator<br/>🧭 Strategy: TS-first now → Rust WASM behind flag<br/>🧪 CI runs tests in TS-only and WASM-enabled modes<br/>⚡ TS implementation is production-ready<br/>📋 Progressive handoff of inner engines"]
        
        TS_SCHEDULER -.->|"**🚨 MIGRATION REQUIRED**<br/>🔄 Replace with Rust Engine<br/>📋 ADR-0005 mandate"| RUST_ENGINE
        TS_CONFIDENCE -.->|"**🚨 MIGRATION REQUIRED**<br/>🔄 Replace with Rust scoring<br/>📊 4D algorithm port"| RUST_CONFIDENCE
        TS_DIFFUSION -.->|"**🚨 MIGRATION REQUIRED**<br/>🔄 Replace with Rust Tapestry<br/>🎯 Cross-platform goal"| RUST_TAPESTRY
    end
    
    %% ========================================
    %% CORE PIPELINE ENGINE (TYPESCRIPT CURRENT)
    %% ========================================
    subgraph CORE ["⚡ **CORE PIPELINE ENGINE** (6-9) - TYPESCRIPT CURRENT<br/>📚 Docs: adr/0005-rust-first-orchestrator.md (🚨 VIOLATION: Should be Rust)"]
        direction TB
        
        ENTRY["**⑥ System Entry**<br/>index.ts boot() function<br/>Creates all components<br/>Wires monitor→scheduler→diffusion"]
        
        subgraph MONITORING ["**INPUT MONITORING** (7)"]
            TM["**TypingMonitor**<br/>core/typingMonitor.ts<br/>Emits TypingEvent stream<br/>Manages event listeners"]
            SEC["**SecurityContext**<br/>core/security.ts<br/>Detects password/IME states<br/>Blocks unsafe operations"]
        end
        
        SS["**⑧ SweepScheduler**<br/>core/sweepScheduler.ts<br/>Pause detection (300ms)<br/>Triggers engine execution<br/>Controls tickOnce() intervals"]
        
        subgraph DIFFUSION ["**DIFFUSION CONTROL** (9)"]
            DC["**DiffusionController**<br/>core/diffusionController.ts<br/>State: {text, caret, frontier}<br/>Unicode: Intl.Segmenter"]
            ARP["**ActiveRegionPolicy**<br/>core/activeRegionPolicy.ts<br/>Sentence window: N∈[2,5] to left; ends at caret<br/>Ranges: Render vs Context"]
            REGION_VIZ["**Visual:**<br/>[████████░░░░░░] caret<br/>■ Processing zone<br/>□ Safe (ahead of cursor)"]
        end
    end
    
    %% ========================================
    %% THREE-STAGE TRANSFORMER PIPELINE
    %% ========================================
    subgraph TRANSFORMERS ["🔧 **THREE-STAGE PIPELINE** (10a-c)<br/>📚 Docs: guide/reference/three-stage-pipeline.md, PRD.md (REQ-STREAMED-DIFFUSION)"]
        direction LR
        
        subgraph STAGE1 ["**🧹 STAGE 1: NOISE** 🟢<br/>📝 Most‑likely intended words<br/>🎯 Priors: keyboard proximity, word frequency<br/>🚫 NO grammar/punctuation changes"]
            T1["**🟢 Noise Transformer**<br/>📁 engines/noiseTransformer.ts<br/>⚡ Trigger: Word boundaries<br/>⏱️ Timing: Immediate (< 5ms)<br/>🔒 Caret-safe only"]
            T1_RULES["**🟢 Active Rules:**<br/>• 🎯 Word substitution (60+ patterns)<br/>• 🔄 Letter transposition detection<br/>• 🧹 Whitespace normalization<br/>• 📍 Keyboard-proximity priors"]
            DENOISE_API["**🟢 Denoising API**<br/>📁 core/api/denoise.ts<br/>🔧 Comprehensive fuzzy correction<br/>🧪 Testing & integration scenarios<br/>📊 100+ substitution patterns"]
        end
        
        LANG_GATE["**🟢 Language Detection**<br/>📁 core/languageDetection.ts<br/>🌐 English vs Other detection<br/>🚪 Pipeline gating logic<br/>📝 English: Full pipeline<br/>🔧 Other: Noise only"]
        
        subgraph STAGE2 ["**📚 STAGE 2: CONTEXT** 🟢<br/>🪟 Window: current sentence ±2<br/>⚖️ Weights: S±1=1.0, S±2=0.5<br/>🔒 Never edit at/after caret"]
            T2["**🟢 Context Transformer**<br/>📁 engines/contextTransformer.ts<br/>⏸️ Trigger: Pause (500ms)<br/>🤖 LM inference (~30ms)<br/>🧠 Dual-context integration"]
            T2_EXAMPLES["**🟢 Corrections:**<br/>• 📝 Grammar, syntax, semantics<br/>• 🔤 Punctuation, capitalization<br/>• 🔗 Cross-sentence coherence<br/>• 🧹 Deterministic repairs"]
            T2_LM_INTEGRATION["**🟢 LM Integration:**<br/>• 📊 Context manager integration<br/>• 🎯 Prompt engineering<br/>• ✅ Output validation<br/>• 🔒 Caret safety enforcement"]
        end
        
        subgraph STAGE3 ["**🎨 STAGE 3: TONE** 🟢<br/>🎭 Options: None, Casual, Professional<br/>✏️ May change wording/grammar/punctuation<br/>🔒 Never edit at/after caret<br/>📏 Scope: last N sentences (CPU:10, higher:20)"]
            T3["**🟢 Tone Transformer**<br/>📁 engines/toneTransformer.ts<br/>⏳ Trigger: After Context<br/>⏱️ Timing: Analysis (~50ms)<br/>📊 Baseline detection"]
            T3_POLISH["**🟢 Features:**<br/>• 📈 Baseline tone detection<br/>• ✏️ Minimal‑diff rewrites<br/>• 📄 Document consistency<br/>• 🎯 Target tone adjustment"]
            T3_TOGGLE["**🟡 Toggle Control**<br/>🔘 Default: ON<br/>⏹️ OFF mid‑process:<br/>finish in‑flight, stop new<br/>🎛️ UX needs enhancement"]
        end
        
        T1 ===>|"**🧹 CLEAN WORDS**<br/>✅ Correctly spelled<br/>📝 Ready for context<br/>⚡ Stage 1 → 2"| T2
        T2 ===>|"**📚 POLISHED TEXT**<br/>✅ Grammar complete<br/>🎨 Ready for tone<br/>⚡ Stage 2 → 3"| T3
        T3_TOGGLE -.->|"**🎛️ TOGGLE CONTROL**<br/>🔘 ON/OFF control"| T3
    end
    
    %% ========================================
    %% TONE CONTROL SUBSYSTEM
    %% ========================================
    subgraph TONE_CONTROL ["🎨 **TONE CONTROL SUBSYSTEM**"]
        direction TB
        
        TONE_TOGGLE["**Toggle Control**<br/>Default: ON<br/>User: Enable/Disable<br/>OFF mid‑process: finish in‑flight"]
        TONE_OPTIONS["**Tone Selection**<br/>None (pass‑through)<br/>Casual, Professional<br/>Scope: last N sentences"]
        TONE_DETECTOR["**Tone Detector**<br/>LM classifier<br/>Baseline tone vector<br/>Document assessment"]
        TONE_ANALYSIS["**Tone Analysis**<br/>Plan minimal‑diff adjustments<br/>τ_tone (0.85) ∧ τ_commit (0.90)"]
        
        TONE_TOGGLE -->|"**Control**"| TONE_OPTIONS
        TONE_OPTIONS -->|"**Parameters**"| TONE_DETECTOR
        TONE_DETECTOR -->|"**Baseline**"| TONE_ANALYSIS
        TONE_ANALYSIS -->|"**Adjustments**"| T3
    end
    
    %% ========================================
    %% LANGUAGE MODEL SUBSYSTEM
    %% ========================================
    subgraph LM ["🧠 **LANGUAGE MODEL SUBSYSTEM** (11)<br/>📚 Docs: guide/reference/lm.md, guide/reference/lm-worker.md"]
        direction TB
        
        LM_CONTEXT_MGR["**🟢 LM Context Manager**<br/>core/lm/contextManager.ts<br/>🔄 Dual-Context Architecture<br/>📊 Wide Context: Full document<br/>🔍 Close Context: ±2-5 sentences<br/>✅ Click-to-activate initialization"]
        
        LM_FACTORY["**🟢 LM Factory**<br/>core/lm/factory.ts<br/>📦 createDefaultLMAdapter()<br/>🔧 Device detection + fallback<br/>⚙️ Configuration management"]
        
        LM_CLIENT["**🟢 TransformersClient**<br/>core/lm/transformersClient.ts<br/>🚫 Single-flight + abort<br/>⏱️ Device-tier adaptive cooldown<br/>📈 Tracks runs + stale drops"]
        
        LM_RUNNER["**🟢 TransformersRunner**<br/>core/lm/transformersRunner.ts<br/>🤖 Qwen2.5-0.5B-Instruct<br/>🌊 Token-by-token streaming<br/>🔒 Singleton pattern"]
        
        LM_WORKER["**🟢 LM Worker**<br/>web-demo/src/worker/lmWorker.ts<br/>🧵 Module Worker (browser)<br/>🌊 Streams tokens; aborts stale<br/>💾 Memory isolation"]
        
        subgraph LM_TIERS ["**🟢 Device Tiers**<br/>📊 Adaptive Performance<br/>🎯 Scope: N sentences<br/>(CPU: 10, WebGPU/WASM: 20)"]
            WEBGPU["**🟢 WebGPU**<br/>🚀 48 tokens max<br/>⏱️ 160ms cooldown<br/>⚡ ~15ms latency"]
            WASM["**🟢 WASM**<br/>⚖️ 24 tokens max<br/>⏱️ 240ms cooldown<br/>🐌 ~30ms latency"]
            CPU["**🟢 CPU**<br/>🔋 16 tokens max<br/>⏱️ 400ms cooldown<br/>🐢 ~100ms latency"]
        end
        
        LM_CONTEXT_MGR -->|"**Context Windows**<br/>Wide + Close data"| LM_FACTORY
        LM_FACTORY -->|"**Creates (node/tests)**<br/>Direct instantiation"| LM_CLIENT
        LM_CLIENT -->|"**Manages**<br/>Lifecycle control"| LM_RUNNER
        LM_FACTORY -->|"**Creates (browser)**<br/>Worker instantiation"| LM_WORKER
        LM_WORKER -->|"**Bridges**<br/>Cross-thread communication"| LM_RUNNER
    end
    
    %% ========================================
    %% CONFIDENCE & STAGING SYSTEM
    %% ========================================
    subgraph CONFIDENCE ["⚖️ **CONFIDENCE & STAGING** (12)<br/>📚 Docs: guide/reference/confidence-system.md, adr/0002-caret-safe-diff.md"]
        direction TB
        
        CG["**🟢 Confidence Gate**<br/>📁 core/confidenceGate.ts<br/>🧮 Mathematical scoring<br/>📊 4-dimensional analysis<br/>🎯 All transformer proposals<br/>✅ Dynamic threshold adjustment"]
        
        CG_MATH["**🟢 Scoring Algorithm:**<br/>• 📊 Input fidelity (30%)<br/>• 🔧 Transform quality (40%)<br/>• 🔗 Context coherence (20%)<br/>• ⏰ Temporal decay (10%)<br/>📈 Combined weighted score"]
        
        SB["**🟢 Staging Buffer**<br/>📁 core/stagingBuffer.ts<br/>🤖 Proposal state machine<br/>🧹 Cleanup stale proposals<br/>🎯 Caret movement triggers<br/>📊 Score tracking"]
        
        SB_STATES["**🟢 State Machine:**<br/>🟡 HOLD → Waiting for confidence<br/>🟢 COMMIT → Apply to text<br/>🔴 DISCARD → Reject proposal<br/>🔄 ROLLBACK → Caret interference"]
        
        THRESHOLDS["**🟢 Decision Thresholds:**<br/>📊 τ_input = 0.65 (try Context)<br/>✅ τ_commit = 0.90 (apply changes)<br/>🎨 τ_tone = 0.85 (Tone gate)<br/>🗑️ τ_discard = 0.30 (reject)<br/>🔒 Dynamic near-caret adjustment"]
        
        LANG_DETECT["**🟢 Language Detection**<br/>📁 core/languageDetection.ts<br/>🌐 English vs Other detection<br/>🚪 Pipeline gating control<br/>📝 Full pipeline: English only<br/>🔧 Noise only: Other languages"]
        
        CG -->|"**Confidence Score [0,1]**<br/>Mathematical assessment"| SB
        LANG_DETECT -->|"**Language Gate**<br/>Pipeline scope control"| CG
    end
    
    %% ========================================
    %% VALIDATION & MERGE
    %% ========================================
    subgraph VALIDATION ["🧩 **VALIDATION & MERGE** (13)<br/>📚 Docs: guide/reference/active-region-design.md, adr/0002-caret-safe-diff.md"]
        direction TB
        
        TAP["**🟢 Active Region Tracker**<br/>📁 core/tapestry.ts<br/>📊 Track validated spans<br/>💾 {original, corrected, confidence}<br/>🚫 Prevent re-processing<br/>🔄 State management"]
        
        TAP_DATA["**🟢 Capabilities:**<br/>• 📍 Span tracking/merging<br/>• 📊 Confidence score storage<br/>• ⏰ Applied timestamps<br/>• 🔒 Re-processing prevention<br/>• 🔄 Rollback state management"]
        
        CONFLICT_RESOLVER["**🟢 Conflict Resolver**<br/>📁 engines/conflictResolver.ts<br/>🔀 Merge overlapping proposals<br/>📋 Precedence: noise > lm > context > tone<br/>📏 Prefer longer spans<br/>🚫 Eliminate conflicts"]
        
        BACKFILL["**🟢 Backfill Consistency**<br/>📁 engines/backfillConsistency.ts<br/>🔍 Text consistency validation<br/>🧹 Gap detection and repair<br/>⚡ Post-correction cleanup"]
        
        DMG["**🟢 Diff/Merge Gate**<br/>📁 utils/diff.ts<br/>⚛️ replaceRange() atomic ops<br/>🛡️ Comprehensive caret protection<br/>🚪 All text changes gateway"]
        
        DMG_SAFETY["**🟢 Safety Guarantees:**<br/>• 🚫 Never edits at/after caret<br/>• 🔤 UTF-16 surrogate pair safe<br/>• ⚛️ Atomic all-or-nothing<br/>• 🎯 Preserves cursor position<br/>• 🛡️ Exception-safe rollback"]
        
        UNDO["**🟢 Undo Isolation**<br/>📁 core/undoIsolation.ts<br/>🎯 Critical UX component<br/>🔀 Separate system/user undo<br/>⏰ 100-200ms time windows<br/>🔄 Internal rollback capability"]
        
        GROUP_UNDO["**🟢 Group Undo**<br/>📁 ui/groupUndo.ts<br/>📦 Batch related edits<br/>👤 User vs system separation<br/>⏰ Time-based grouping"]
        
        TAP -->|"**Validated Spans**<br/>Confidence data"| BACKFILL
        BACKFILL -->|"**Consistent Text**<br/>Gap-free content"| DMG
        DMG -->|"**System Edits**<br/>Atomic operations"| UNDO
        UNDO -->|"**Edit Grouping**<br/>Batch operations"| GROUP_UNDO
    end
    
    %% ========================================
    %% UI FEEDBACK SYSTEM
    %% ========================================
    subgraph UI_FEEDBACK ["🎨 **UI FEEDBACK SYSTEM** (14)<br/>📚 Docs: PRD.md (REQ-VISUAL-SWAP, REQ-A11Y-MOTION), system_principles.md"]
        direction LR
        
        UI_HIGH["**🟢 UI Highlighter**<br/>📁 ui/highlighter.ts<br/>📡 emitActiveRegion() events<br/>📞 Called from DiffusionController<br/>✨ Subtle region highlighting<br/>🎨 Visual feedback coordination"]
        
        UI_SWAP["**🟡 SwapRenderer**<br/>📁 ui/swapRenderer.ts<br/>🔧 Needs polish<br/>🔄 Mechanical letter swap<br/>🎯 Target: Braille markers<br/>🎬 Animation coordination"]
        
        UI_LIVE["**🟢 LiveRegion**<br/>📁 ui/liveRegion.ts<br/>♿ WCAG 2.2 AA compliant<br/>📢 Screen reader announcements<br/>💬 'text updated behind cursor'<br/>🔊 Accessibility integration"]
        
        UI_MOTION["**🟢 Motion Detection**<br/>📁 ui/motion.ts<br/>🎭 prefers-reduced-motion<br/>🎬 Animation fallbacks<br/>♿ Accessibility compliance"]
        
        UI_SECURITY["**🟢 Security Detection**<br/>📁 ui/securityDetection.ts<br/>🔐 Password field detection<br/>🚫 IME state awareness<br/>🛡️ Safe operation gating"]
        
        UI_EVENTS["**🟢 Event Coordination:**<br/>• 📡 mindtype:activeRegion<br/>• ✨ mindtype:highlight<br/>• 📢 Screen reader announcements<br/>• 🎭 Reduced motion detection<br/>• 🌐 Cross-browser compatibility"]
        
        UI_HIGH -->|"**Highlight Events**<br/>Visual feedback"| UI_SWAP
        UI_HIGH -->|"**Region Events**<br/>Accessibility"| UI_LIVE
        UI_MOTION -->|"**Animation Control**<br/>Preference detection"| UI_SWAP
        UI_SECURITY -->|"**Safety Gates**<br/>Operation blocking"| UI_HIGH
    end
    
    %% ========================================
    %% CONTINUOUS LOOP EXPLANATION
    %% ========================================
    subgraph LOOP_DETAIL ["🔄 **TYPING LOOP EXAMPLE**"]
        direction TB
        
        LOOP_TITLE["**📝 Typing Example: 'helloo thr weathfr'**<br/>🔢 Complete Pipeline Execution Trace"]
        
        RUNS["**📊 Pipeline Execution Flow:**<br/>1-6: 'helloo' → 🔨 Building word, no changes<br/>7: ' ' → 🧹 'helloo' → 'hello' (NOISE)<br/>8-10: 'thr' → 🔨 Building next word<br/>11: ' ' → 🧹 'thr' → 'the' (NOISE)<br/>12: 'weathfr' → 🔨 Building final word<br/>13: Pause 500ms → 📚 Context analysis<br/>14: Grammar check → 🎨 Tone analysis<br/>**✅ Final Result:** 'Hello, the weather'"]
        
        LOOP_PERFORMANCE["**⚡ Performance Characteristics:**<br/>• 📈 90%+ runs: No changes needed<br/>• 🎯 Only word boundaries trigger fixes<br/>• ✅ Validated text regions skipped<br/>• 🎬 60fps UI throttling maintained<br/>• ⏱️ ~5ms noise, ~30ms context, ~50ms tone<br/>• 🧠 Memory efficient: O(1) hot paths"]
        
        LOOP_METRICS["**📊 Key Metrics (Current):**<br/>• 🧪 255 tests passing (95.11% coverage)<br/>• 🎯 16 denoising test cases (50% pass)<br/>• ⚡ <100ms total pipeline latency<br/>• 🔒 100% caret safety compliance<br/>• 🌐 Cross-browser compatibility"]
    end
    
    %% ========================================
    %% CONFIGURATION & TESTING SUBSYSTEM
    %% ========================================
    subgraph CONFIG_TEST ["⚙️ **CONFIGURATION & TESTING**<br/>📚 Docs: guide/reference/config-flags.md, qa/acceptance/ (BDD scenarios)"]
        direction TB
        
        CONFIG["**🟢 Configuration System**<br/>📁 config/defaultThresholds.ts<br/>⚙️ Pipeline parameters<br/>🎛️ Confidence thresholds<br/>⏱️ Timing controls<br/>📊 Device tier settings"]
        
        TESTING["**🟢 Test Infrastructure**<br/>📁 tests/ (255 tests)<br/>🧪 Unit tests per component<br/>🔗 Integration test suites<br/>🎯 95.11% code coverage<br/>🔒 Caret safety validation"]
        
        E2E_TESTS["**🟢 End-to-End Testing**<br/>📁 e2e/ (Playwright)<br/>🌐 Browser automation<br/>👤 User interaction simulation<br/>🔍 Visual regression testing<br/>📊 Performance benchmarking"]
        
        DENOISE_TESTS["**🟢 Denoising Test Suite**<br/>📁 tests/denoise.spec.ts<br/>🧪 16 fuzzy text test cases<br/>📊 50% pass rate baseline<br/>🔄 Regression detection<br/>🎯 Comprehensive pattern coverage"]
        
        CONFIG -->|"**Runtime Parameters**<br/>Threshold configuration"| CG
        CONFIG -->|"**Device Settings**<br/>Performance tuning"| LM_TIERS
        TESTING -->|"**Validation Data**<br/>Test scenarios"| DENOISE_TESTS
        E2E_TESTS -->|"**Integration Validation**<br/>End-to-end flows"| TESTING
    end
    
    %% ========================================
    %% PRIMARY DATA FLOW (Left to Right)
    %% ========================================
    
    %% ========================================
    %% PRIMARY DATA FLOW CONNECTIONS (Left to Right)
    %% ========================================
    
    %% ═══ CRITICAL INPUT FLOW (High Priority) ═══
    PIPELINE_INGEST ===>|"**🚀 TYPING EVENT**<br/>📦 TypingEvent {text, caret, atMs}<br/>⚡ Critical path start"| ENTRY
    
    %% ═══ PLATFORM INTEGRATION (Foundation) ═══
    WEB ==>|"**🌐 DIRECT CALL**<br/>🔧 handleTextChange() in App.tsx<br/>📱 Web platform active"| ENTRY
    MAC -->|"**🔮 FFI BRIDGE (PLANNED)**<br/>🍎 Swift AX API → Rust core<br/>🚧 Future implementation"| RUST_FFI
    RUST_FFI -.->|"**⚠️ NOT YET CONNECTED**<br/>🚧 Rust core incomplete"| ENTRY
    
    %% Core Pipeline Flow (Nodes 6-9) - CURRENT TYPESCRIPT IMPLEMENTATION
    ENTRY -->|"**Event Distribution**<br/>Creates monitor + scheduler"| TM
    ENTRY -->|"**Security Context**<br/>Injects security checks"| SEC
    ENTRY -->|"**Creates TS Components**<br/>Uses current TS implementation"| TS_SCHEDULER
    TM -->|"**Debounced Stream**<br/>Filtered keystroke events"| SS
    SEC -->|"**Security Signals**<br/>Blocks unsafe operations"| SS
    TS_SCHEDULER -->|"**Currently Implements**<br/>What SS should do"| SS
    
    %% Scheduling to Diffusion (Nodes 8-9) - CORRECTED: SS owns DC
    SS -->|"**Creates & Manages**<br/>Internal diffusion controller"| DC
    SS -->|"**Region Policy**<br/>3-8 word window config"| ARP
    
    %% SweepScheduler Orchestrates All Transformers - ACTUAL FLOW
    SS -->|"**Direct Call**<br/>runSweeps() → noiseTransform()"| T1
    SS -->|"**Language Gate**<br/>detectLanguage() → English check"| LANG_DETECT
    LANG_DETECT -->|"**Pipeline Control**<br/>English: Full | Other: Noise only"| SS
    SS -->|"**Pause Processing**<br/>contextTransform() call"| T2
    SS -->|"**Tone Processing**<br/>planAdjustments() call"| T3
    
    %% DiffusionController Internal Operations
    DC -->|"**Streaming Ticks**<br/>tickOnce() → noiseTransform()"| T1
    DC -->|"**Visual Feedback**<br/>emitActiveRegion() calls"| UI_HIGH
    DC -->|"**Swap Events**<br/>renderHighlight() calls"| UI_SWAP
    ARP -->|"**Safety Constraints**<br/>Caret-safe boundaries"| DC
    
    %% LM Integration (Stage 2 Context Processing)
    T2 -->|"**Context Request**<br/>Sentence + surrounding context"| LM_CONTEXT_MGR
    LM_CONTEXT_MGR -->|"**Dual Context**<br/>Wide + Close windows"| LM_FACTORY
    LM_FACTORY -->|"**LM Adapter**<br/>Configured for context"| T2
    LM_RUNNER -->|"**Token Stream**<br/>Incremental LM corrections"| T2
    
    %% ═══ TRANSFORMER PROPOSAL COLLECTION (Critical Merge) ═══
    T1 ===>|"**🧹 NOISE PROPOSALS**<br/>🔧 Typo corrections<br/>⚡ Immediate fixes"| CONFLICT_RESOLVER
    T2 ===>|"**📚 CONTEXT PROPOSALS**<br/>🧠 Grammar + style fixes<br/>🤖 LM-powered"| CONFLICT_RESOLVER
    T3 ===>|"**🎨 TONE PROPOSALS**<br/>✨ Tone consistency<br/>🎭 Style adjustment"| CONFLICT_RESOLVER
    
    %% ═══ QUALITY CONTROL PIPELINE (Decision Flow) ═══
    CONFLICT_RESOLVER ===>|"**🔀 MERGED PROPOSALS**<br/>🚫 No overlaps<br/>📋 Prioritized<br/>⚡ Ready for scoring"| CG
    
    CG ===>|"**📊 SCORED PROPOSALS**<br/>🧮 Confidence assessment<br/>⚖️ Mathematical validation<br/>🎯 Quality gated"| SB
    
    SB ===>|"**✅ APPROVED EDITS**<br/>📊 Score ≥ τ_commit (0.90)<br/>🚪 Quality gate passed<br/>🎯 Ready for application"| TAP
    
    %% SweepScheduler Calls Backfill (MISSING CONNECTION)
    SS -->|"**Consistency Check**<br/>backfillConsistency() call"| BACKFILL
    
    %% ═══ VALIDATION & APPLICATION FLOW (Final Processing) ═══
    CONFLICT_RESOLVER ===>|"**🔀 RESOLVED PROPOSALS**<br/>📞 diffusion.applyExternal()<br/>⚡ Final application"| DC
    DC ===>|"**🎯 APPLIED CHANGES**<br/>📝 Text updates + UI feedback<br/>✅ Changes committed"| TAP
    TAP ==>|"**📊 VALIDATED SPANS**<br/>💾 Confidence + tracking data<br/>🔍 State management"| DMG
    DMG ===>|"**⚛️ SYSTEM EDITS**<br/>🔧 Atomic text operations<br/>🛡️ Caret-safe"| UNDO
    UNDO ==>|"**📦 EDIT BATCHING**<br/>👤 User vs system separation<br/>⏰ Time-based grouping"| GROUP_UNDO
    
    %% ═══ UI FEEDBACK INTEGRATION (Visual Response) ═══
    DC ===>|"**📡 ACTIVE REGION**<br/>✨ emitActiveRegion() calls<br/>🎨 Visual highlighting"| UI_HIGH
    DC ===>|"**🎬 SWAP EVENTS**<br/>🔄 renderHighlight() calls<br/>🎭 Mechanical animation"| UI_SWAP
    UI_SECURITY -->|"**🛡️ SAFETY OVERRIDE**<br/>🚫 Block unsafe operations<br/>🔐 Security gating"| DMG
    
    %% ═══ FINAL OUTPUT FLOW (Critical Path End) ═══
    UI_SWAP ===>|"**🎯 TEXT APPLICATION**<br/>🌐 DOM manipulation<br/>🎉 User sees result"| CORRECTIONS_READY
    
    %% ========================================
    %% FEEDBACK LOOPS (Dotted - Secondary Flow)
    %% ========================================
    
    %% Rollback Paths
    %% Rollback Flow (CORRECTED: SS orchestrates rollback)
    UPDATED_FIELD -.->|"**Caret Moved**<br/>New typing event"| TM
    TM -.->|"**Caret Event**<br/>Position change"| SS
    SS -.->|"**Rollback Trigger**<br/>sb.onCaretMove()"| SB
    SB -.->|"**Rollback Signal**<br/>Overlapping proposals"| DC
    DC -.->|"**System Rollback**<br/>rollbackLastSystemGroup()"| UNDO
    
    %% Region Updates
    ARP -.->|"**Region Update**"| DC
    
    %% ═══════════════════════════════════════════════════════════════
    %% 🎨 VISUAL STYLING & GESTALT PRINCIPLES
    %% ═══════════════════════════════════════════════════════════════
    
    %% ═══ IMPLEMENTATION STATUS COLORS (Primary Visual Hierarchy) ═══
    classDef ready fill:#c8e6c9,stroke:#2e7d32,stroke-width:3px,color:#1b5e20
    classDef partial fill:#fff3c4,stroke:#f57c00,stroke-width:3px,color:#e65100
    classDef missing fill:#ffcdd2,stroke:#c62828,stroke-width:3px,color:#b71c1c
    
    %% ═══ ARCHITECTURAL LAYER COLORS (Gestalt Grouping) ═══
    %% Critical Flow (Bright, High Contrast)
    classDef criticalFlow fill:#e3f2fd,stroke:#0d47a1,stroke-width:4px,color:#0d47a1
    
    %% Input/Output (Green - Natural Flow)
    classDef inputOutput fill:#e8f5e8,stroke:#2e7d32,stroke-width:3px,color:#1b5e20
    
    %% Platform Layer (Blue - Foundation)
    classDef platformLayer fill:#e1f5fe,stroke:#0277bd,stroke-width:2px,color:#01579b
    
    %% Current Implementation (Orange - Active)
    classDef currentImpl fill:#fff3e0,stroke:#f57c00,stroke-width:3px,color:#e65100
    
    %% Target Implementation (Red - Future)
    classDef targetImpl fill:#fce4ec,stroke:#ad1457,stroke-width:2px,color:#880e4f
    
    %% Processing Engines (Purple - Transformation)
    classDef processingEngine fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#4a148c
    
    %% Intelligence Layer (Teal - AI/LM)
    classDef intelligenceLayer fill:#e0f2f1,stroke:#00695c,stroke-width:2px,color:#004d40
    
    %% Validation & Safety (Amber - Control)
    classDef validationSafety fill:#fff8e1,stroke:#ff8f00,stroke-width:2px,color:#ff6f00
    
    %% User Interface (Indigo - Interaction)
    classDef userInterface fill:#e8eaf6,stroke:#3949ab,stroke-width:2px,color:#283593
    
    %% Documentation & Testing (Green - Support)
    classDef supportSystem fill:#f1f8e9,stroke:#689f38,stroke-width:2px,color:#33691e
    
    %% ═══ SPECIAL EMPHASIS STYLES ═══
    %% Entry/Exit Points (Bold, High Visibility)
    classDef entryExit fill:#fff,stroke:#000,stroke-width:4px,color:#000
    
    %% Bug/Violation Flags (Red Alert)
    classDef bugFlag fill:#ffebee,stroke:#d32f2f,stroke-width:3px,color:#c62828,stroke-dasharray: 5 5
    
    %% Migration Path (Dashed, Transition)
    classDef migrationPath fill:#f5f5f5,stroke:#757575,stroke-width:2px,stroke-dasharray: 10 5
    
    %% ═══════════════════════════════════════════════════════════════
    %% 🎨 GESTALT VISUAL HIERARCHY APPLICATION
    %% ═══════════════════════════════════════════════════════════════
    
    %% ═══ CRITICAL FLOW (High Contrast, Bold) ═══
    class TEXT_FIELD,UPDATED_FIELD entryExit
    class TEXT_LOOP,TEXT_INPUT,TEXT_OUTPUT criticalFlow
    
    %% ═══ INPUT/OUTPUT FLOW (Green - Natural Progression) ═══
    class DOM_EVENTS,PIPELINE_INGEST,CORRECTIONS_READY,REPLACE_RANGE inputOutput
    
    %% ═══ PLATFORM FOUNDATION (Blue - Stable Base) ═══
    class PLATFORM,WEB,MAC,NORMALIZE platformLayer
    
    %% ═══ CURRENT IMPLEMENTATION (Orange - Active System) ═══
    class DUAL_ARCH,TS_CURRENT,TS_SCHEDULER,TS_DIFFUSION,TS_CONFIDENCE currentImpl
    class CORE,ENTRY,MONITORING,TM,SEC,SS,DIFFUSION,DC,ARP,REGION_VIZ currentImpl
    
    %% ═══ TARGET IMPLEMENTATION (Pink - Future Vision) ═══
    class RUST_TARGET,RUST_ENGINE,RUST_TAPESTRY,RUST_CONFIDENCE,RUST_FFI targetImpl
    class MIGRATION_NOTE migrationPath
    
    %% ═══ PROCESSING ENGINES (Purple - Transformation) ═══
    class TRANSFORMERS,STAGE1,STAGE2,STAGE3 processingEngine
    class T1,T1_RULES,DENOISE_API,T2,T2_EXAMPLES,T2_LM_INTEGRATION,T3,T3_POLISH processingEngine
    class LANG_GATE processingEngine
    
    %% ═══ INTELLIGENCE LAYER (Teal - AI/LM) ═══
    class LM,LM_CONTEXT_MGR,LM_FACTORY,LM_CLIENT,LM_RUNNER,LM_WORKER intelligenceLayer
    class LM_TIERS,WEBGPU,WASM,CPU intelligenceLayer
    
    %% ═══ CONFIDENCE & CONTROL (Amber - Decision Making) ═══
    class CONFIDENCE,CG,CG_MATH,SB,SB_STATES,THRESHOLDS,LANG_DETECT validationSafety
    
    %% ═══ VALIDATION & SAFETY (Amber - Quality Control) ═══
    class VALIDATION,TAP,TAP_DATA,CONFLICT_RESOLVER,BACKFILL validationSafety
    class DMG,DMG_SAFETY,UNDO,GROUP_UNDO validationSafety
    
    %% ═══ USER INTERFACE (Indigo - Human Interaction) ═══
    class UI_FEEDBACK,UI_HIGH,UI_SWAP,UI_LIVE,UI_MOTION,UI_SECURITY,UI_EVENTS userInterface
    class TONE_CONTROL,TONE_TOGGLE,TONE_OPTIONS,TONE_DETECTOR,TONE_ANALYSIS userInterface
    
    %% ═══ SUPPORT SYSTEMS (Green - Infrastructure) ═══
    class LOOP_DETAIL,LOOP_TITLE,RUNS,LOOP_PERFORMANCE,LOOP_METRICS supportSystem
    class CONFIG_TEST,CONFIG,TESTING,E2E_TESTS,DENOISE_TESTS supportSystem
    
    %% ═══ SPECIAL EMPHASIS (Bugs, Migration, Critical Points) ═══
    %% Bug Flags (ADR Violations)
    class CORE bugFlag
    class MIGRATION_NOTE bugFlag
    
    %% Migration Paths (Transition States)
    class TS_SCHEDULER,TS_CONFIDENCE,TS_DIFFUSION migrationPath
    class RUST_ENGINE,RUST_TAPESTRY,RUST_CONFIDENCE migrationPath
    
    %% ═══════════════════════════════════════════════════════════════
    %% IMPLEMENTATION STATUS (v0.4 - Updated September 2025)
    %% ═══════════════════════════════════════════════════════════════
    
    %% 🟢 READY: Core pipeline, transformers, LM system, confidence gating
    class ENTRY,TM,SEC,SS,DC,ARP ready
    class T1,T1_RULES,DENOISE_API ready
    class T2,T2_EXAMPLES,T2_LM_INTEGRATION ready
    class T3,T3_POLISH ready
    class LM_CONTEXT_MGR,LM_FACTORY,LM_CLIENT,LM_RUNNER,LM_WORKER ready
    class CG,CG_MATH,SB,SB_STATES,THRESHOLDS,LANG_DETECT ready
    class TAP,TAP_DATA,CONFLICT_RESOLVER,BACKFILL,DMG,DMG_SAFETY,UNDO,GROUP_UNDO ready
    class UI_HIGH,UI_LIVE,UI_MOTION,UI_SECURITY,UI_EVENTS ready
    class WEB,NORMALIZE ready
    class WEBGPU,WASM,CPU ready
    class LANG_GATE ready
    class CONFIG,TESTING,E2E_TESTS,DENOISE_TESTS ready
    
    %% 🟡 PARTIAL: UI components needing polish, tone UX controls
    class UI_SWAP,T3_TOGGLE,TONE_TOGGLE,TONE_OPTIONS,TONE_ANALYSIS partial
    
    %% 🔴 MISSING: Platform implementations not yet built
    class MAC missing
    
    %% ═══════════════════════════════════════════════════════════════
    %% 📚 DOCUMENTATION REFERENCE MAP
    %% ═══════════════════════════════════════════════════════════════
    %% 
    %% CORE REQUIREMENTS & CONSTRAINTS:
    %% • PRD.md - Functional requirements (REQ-*), success metrics, constraints
    %% • system_principles.md - Behavioral principles, human-centric design
    %% • adr/0003-architecture-constraints.md - On-device processing, privacy
    %% • adr/0005-rust-first-orchestrator.md - 🚨 VIOLATED: Core should be Rust
    %% 
    %% TECHNICAL SPECIFICATIONS:
    %% • guide/reference/three-stage-pipeline.md - Pipeline flow, conflict resolution
    %% • guide/reference/confidence-system.md - Scoring algorithms, thresholds
    %% • guide/reference/lm.md - Language model integration, dual-context
    %% • guide/reference/active-region-design.md - Caret safety, span management
    %% • adr/0002-caret-safe-diff.md - Diff safety guarantees
    %% 
    %% TESTING & VALIDATION:
    %% • qa/acceptance/ - BDD scenarios for user-facing behavior
    %% • tests/ - Unit tests, integration tests, 95.11% coverage
    %% • e2e/ - Playwright end-to-end browser testing
    %% 
    %% DUAL ARCHITECTURE EXPLANATION:
    %% 🟢 TYPESCRIPT (CURRENT): Fully functional, production-ready implementation
    %% 🔴 RUST (TARGET): Partial stubs, migration target per ADR-0005
    %% 🎯 WHY BOTH: TS provides immediate functionality while Rust enables cross-platform
    %% 
    %% MIGRATION PATH:
    %% 1. Complete Rust core implementation (engine.rs, confidence.rs, tapestry.rs)
    %% 2. Wire Rust FFI/WASM bindings to replace TS orchestration
    %% 3. Keep TS transformers (engines/) and UI components unchanged
    %% 4. Test cross-platform compatibility (web WASM + macOS FFI)
    %% 
    %% BUGS IDENTIFIED:
    %% 🚨 ADR-0005 VIOLATION: Core orchestrator should be Rust, currently TypeScript
    %% 🚨 Pipeline flow bypasses proper ConflictResolver → DiffusionController flow
    %% 🚨 Rust implementation incomplete - only stubs exist, no functional core
    %% ═══════════════════════════════════════════════════════════════
