---
alwaysApply: true
---

# Generation Structure Rules

This file contains the generation structure and patterns for the Mind::Type project.

## Code Generation Principles (Concise)

### Architecture
- Rust-first core (`crates/core-rs/**`) owns all correction/orchestration logic.
- UI/web/macOS integrate via FFI/WASM; TypeScript remains for demos and UI only.
- Keep modules small, cohesive, and testable; avoid unnecessary abstractions.

### Naming
- Prefer clear, technical compound names without spaces (e.g., `NoiseWorker`).
- Use snake_case in Rust; PascalCase for types; follow Rust API idioms.
- In TS UI, follow project conventions (PascalCase components, camelCase vars).

### Documentation
- Docs are authoritative; edit docs first, then code.
- Run `pnpm doc:check` then `pnpm doc:sync` before coding linked modules.
- Keep READMEs minimal; link to PRD/Architecture/Guides for details.

### Quality Gates (per change)
- Rust: `cargo clippy -- -D warnings` and `cargo test` must pass.
- TS UI/Demos: `pnpm -s test` must pass.
- Formatting/linters must pass across touched stacks.

### Simplicity
- Prefer the simplest solution that meets requirements; avoid over‑engineering.
- Ship small, verifiable diffs with tests and traceable docs.

### Model Guidance
- Follow LM Operating Guidelines in `workflow.mdc` §2.2 for execution excellence in Cursor.
 - For creative solutioning, apply §2.3 “Ingenuity & Autonomy Toolkit”.
